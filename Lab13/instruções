/* Laboratorio 15 - Conjuntos
   Nome: Vicenzo Cano Cesconetto
   RA: 206456
 */

char U[] = "abcdefghijklmnopqrstuvwxyz";
#include <stdio.h>

/* Funcao: pertence
 *
 * Parametros:
 *   conj: vetor contendo o conjunto de entrada
 *    tam: tamanho do conjunto
 *  letra: elemento a ser verificado pertinencia
 *
 * Retorno:
 *   1 se letra pertence a conj e 0 caso contrario
 */
int pertence(char conj[], int tam, char letra){
  for (int i = 0; i < tam; ++i){
    if (conj[i] == letra){
      return 1;
    }
  }
  return 0;
}

/* Funcao: contido
 *
 * Parametros:
 *   conj1: vetor contendo um conjunto de entrada
 *   conj2: vetor contendo um conjunto de entrada
 *    tam1: tamanho do conjunto conj1
 *    tam2: tamanho do conjunto conj2
 *
 * Retorno:
 *   1 se conj1 esta contido em conj2 e 0 caso contrario
 */
int contido(char conj1[], char conj2[], int tam1, int tam2) {
  int c = 0;
  for (int i = 0; i < tam1 ; ++i) {
    for (int j = 0; j < tam2; ++j) {
      if (conj1[i] == conj2[j]) {
        ++c;
      }
    }
  }
  if ( c == tam1) {
    return 1;
  }
  return 0;
}

/* Funcoes: adicao e subtracao
 *
 * Parametros:
 *   conj: vetor contendo o conjunto que tera incluso ou removido o elemento
 *    tam: tamanho do conjunto
 *  letra: elemento a ser adicionado ou removido
 *
 * Retorno:
 *   tamanho do conjunto apos a operacao.
 */
int adicao(char conj[], int tam, char letra) {
  for (int i = 0; i < tam; ++i){
    if (letra == conj[i]) {
      return tam;
    }
  }
  conj[tam] = letra;
  ++tam;
  return tam;
}

int subtracao(char conj[], int tam, char letra) {
  for (int i = 0; i < tam; ++i){
    if (conj[i] == letra){
      conj[i] = conj[tam-1];
      --tam;
      break;
    }
  }
  return tam;
}

/* Funcoes: uniao, intersecao e diferenca
 *
 * Parametros:
 *   conjRes: vetor contendo o conjunto de saida/resultado da operacao
 *     conj1: vetor contendo o conjunto de entrada do primeiro operando
 *     conj2: vetor contendo o conjunto de entrada do segundo operando
 *      tam1: tamanho do conjunto conj1
 *      tam2: tamanho do conjunto conj2
 *
 * Retorno:
 *   tamanho do conjunto de saida conjRes.
 */
int uniao(char destRes[], char conj1[], char conj2[], int tam1, int tam2) {
  int f = tam1;
  for (int i = 0; i < tam1; ++i) {
    destRes[i] = conj1[i];
  }

for (int i = 0; i < tam2; ++i) {
  f = adicao(destRes, f, conj2[i]);
}
  /* Implementar a funcao e trocar o valor de retorno */
  return f;
}

int intersecao(char destRes[], char conj1[], char conj2[], int tam1, int tam2){
  int v = 0;
  for (int i = 0; i < tam1 ; ++i){
    for (int j = 0; j < tam2; ++j){
      if (conj2[j] == conj1[i]){
        destRes[v] = conj2[j];
        ++v;
      }
    }
  }
  /* Implementar a funcao e trocar o valor de retorno */
  return v;
}

int diferenca(char destRes[], char conj1[], char conj2[], int tam1, int tam2){
  int c = tam1;
  for (int i = 0; i < tam1; ++i){
    destRes[i] = conj1[i];
  }
  for (int i = 0; i < tam2; ++i){
    c = subtracao (destRes, c, conj2[i]);
  }
  /* Implementar a funcao e trocar o valor de retorno */
  return c;
}


/* Funcao: complemento
 * Guarda em conjRes o resultado da operação U-conj, onde U é o conjunto 
 * de todas as letras minusculas do alfabeto ingles
 *
 * Parametros:
 *   conjRes: vetor contendo o conjunto de saida/resultado da operacao
 *      conj: vetor contendo o conjunto de entrada do primeiro operando
 *       tam: tamanho do conjunto conj
 *
 * Retorno:
 *   tamanho do conjunto de saida conjRes.
 */
int complemento(char conjRes[], char conj[], int tam){
  int c = tam;
  c = diferenca(conjRes, U, conj, 26, tam);
  /* Implementar a funcao e trocar o valor de retorno */
  return c;
}